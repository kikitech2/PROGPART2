import javax.swing.JOptionPane;
import org.json.JSONObject;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.ArrayList;

public class Message {

    private int numMessagesSent = 0;
    private ArrayList<JSONObject> sentMessages = new ArrayList<>();


    public void sendMessageFlow(int messageNumber) {
        String recipient = JOptionPane.showInputDialog("Enter recipient cell number (e.g., +27821234567):");
        if (!checkRecipient(recipient)) {
            JOptionPane.showMessageDialog(null, "Invalid recipient number. It must start with an international code and have no more than ten characters.");
            return;
        }

        String messageContent = JOptionPane.showInputDialog("Enter your message (max 50 characters):");
        if (!checkMessageLength(messageContent)) {
            JOptionPane.showMessageDialog(null, "Please enter a message of less than 50 characters.");
            return;
        }

        String messageID = generateMessageID();
        numMessagesSent++;
        String messageHash = generateMessageHash(messageID, messageNumber, messageContent);


        JSONObject messageDetails = new JSONObject();

        messageDetails.put("MessageID", messageID);
        messageDetails.put("Message Hash", messageHash);
        messageDetails.put("Recipient", recipient);
        messageDetails.put("Message", messageContent);
        messageDetails.put("Num messages sent", numMessagesSent);

        int choice = JOptionPane.showOptionDialog(
                null,
                "Choose an action:" +
                        "MessageID: " + " " + messageID +
                        "Message Hash: " + " " + messageHash +
                        "Recipient: " + " " +recipient +
                        "Message: " + messageContent + " ",
                "Send Options",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                new String[]{"Send Message", "Disregard Message", "Store Message to send later", "Store Message in JSON"},
                "Send Message"
        );

        switch (choice) {
            case 0: // Send Message
                sentMessages.add(messageDetails);
                JOptionPane.showMessageDialog(null, "Message sent!" + messageDetails.toString(4)); // Added \n
                break;
            case 1: // Disregard Message
                JOptionPane.showMessageDialog(null, "Message disregarded.");
                break;
            case 2: // Store Message to send later (in memory)
                sentMessages.add(messageDetails);
                JOptionPane.showMessageDialog(null, "Message stored to send later (in memory)." + messageDetails.toString(4));
                break;
            case 3: // Store Message in JSON
                storeMessageInJSON(messageDetails);
                break;
            default:
                JOptionPane.showMessageDialog(null, "No action selected.");
                break;
        }
    }

    private boolean checkRecipient(String recipient) {
        return recipient != null && recipient.matches("^\\+[0-9]{1,3}[0-9]{9,12}$");
    }

    private boolean checkMessageLength(String message) {
        return message != null && message.length() <= 50;
    }

    String generateMessageID() {
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }

    String generateMessageHash(String messageID, int messageNumber, String messageContent) {
        String firstTwoID = messageID.substring(0, Math.min(2, messageID.length()));
        String[] words = messageContent.split("\\s+");
        String firstWord = words.length > 0 ? words[0].toUpperCase() : "";
        String lastWord = words.length > 0 ? words[words.length - 1].toUpperCase() : "";
        return String.format("%s:%d:%s%s", firstTwoID, messageNumber, firstWord, lastWord);
    }

    private void storeMessageInJSON(JSONObject message) {
        try {
            java.io.File fileObj = new java.io.File("stored_messages.json");
            boolean fileExists = fileObj.exists() && fileObj.length() > 0;

            try (FileWriter file = new FileWriter(fileObj, true)) {
                // true for append mode.
                if (fileExists) {

                    file.write(", " + message.toString(4));
                    // Append with a comma and newline.
                } else {
                    file.write("[ " + message.toString(4));
                    // Start new JSON array with first object.
                }
            }
            JOptionPane.showMessageDialog(null, "Message stored in stored_messages.json");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error storing message in JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }


    // This method is for reading the JSON file to ensure it's a valid array.

    private void appendMessageToJSONArrayFile(JSONObject message) {
        org.json.JSONArray jsonArray = new org.json.JSONArray();
        java.io.File fileObj = new java.io.File("stored_messages.json");

        if (fileObj.exists() && fileObj.length() > 0) {
            try (java.io.FileReader reader = new java.io.FileReader(fileObj)) {
                StringBuilder sb = new StringBuilder();
                int character;
                while ((character = reader.read()) != -1) {
                    sb.append((char) character);
                }
                String fileContent = sb.toString();

                if (fileContent.trim().startsWith("[")) {
                    jsonArray = new org.json.JSONArray(fileContent);
                }
            } catch (IOException | org.json.JSONException e) {
                JOptionPane.showMessageDialog(null, "Error reading existing JSON file: " + e.getMessage());
                e.printStackTrace();
                // This method will continue the walkthrough of the array or stop the procedure.
            }
        }

        jsonArray.put(message); // A new message is added.

        try (FileWriter file = new FileWriter(fileObj, false)) { // false to overwrite
            file.write(jsonArray.toString(4)); // Allows the array to be correctly populated.
            JOptionPane.showMessageDialog(null, "Message stored in stored_messages.json");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error storing message in JSON file: " + e.getMessage());
            e.printStackTrace();
        }
    }


    public int getTotalMessagesSent() {
        return numMessagesSent;
    }
