import javax.swing.JOptionPane;
import org.json.JSONObject;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.ArrayList;
import java.util.List;

public class Message {


    private int numMessagesSent = 0;
    private ArrayList<JSONObject> sentMessages = new ArrayList<>();

    public <JSONObject> void sendMessageFlow(int messageNumber) {
        String recipient = JOptionPane.showInputDialog("Enter recipient cell number (e.g., +27821234567):");
        if (!checkRecipient(recipient)) {
            JOptionPane.showMessageDialog(null, "Invalid recipient number. It must start with an international code and have no more than ten characters.");
            return;
        }

        String messageContent = JOptionPane.showInputDialog("Enter your message (max 50 characters):");
        if (!checkMessageLength(messageContent)) {
            JOptionPane.showMessageDialog(null, "Please enter a message of less than 50 characters.");
            return;
        }

        String messageID = generateMessageID();
        numMessagesSent++;
        String messageHash = generateMessageHash(messageID, messageNumber, messageContent);


        JSONObject messageDetails = new JSONObject();
        messageDetails.put("MessageID", messageID);
        messageDetails.put("Message Hash", messageHash);
        messageDetails.put("Recipient", recipient);
        messageDetails.put("Message", messageContent);
        messageDetails.put("Num messages sent", numMessagesSent);

        int choice = JOptionPane.showOptionDialog(
                null,
                "Choose an action:\n" +
                        "MessageID: " + messageID + "\n" +
                        "Message Hash: " + messageHash + "\n" +
                        "Recipient: " + recipient + "\n" +
                        "Message: " + messageContent + "\n",
                "Send Options",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.PLAIN_MESSAGE,
                null,
                new String[]{"Send Message", "Disregard Message", "Store Message to send later", "Store Message in JSON"},
                "Send Message"
        );

        switch (choice) {
            case 0: // Send Message
                sentMessages.add(messageDetails);
                JOptionPane.showMessageDialog(null, "Message sent!\n" + messageDetails.toString(4));
                break;
            case 1: // Disregard Message
                JOptionPane.showMessageDialog(null, "Message disregarded.");
                break;
            case 2: // Store Message to send later (in memory)
                // For simplicity, we'll just store it in the sentMessages list for now
                sentMessages.add(messageDetails);
                JOptionPane.showMessageDialog(null, "Message stored to send later (in memory).\n" + messageDetails.toString(4));
                break;
            case 3: // Store Message in JSON
                storeMessageInJSON(messageDetails);
                break;
            default:
                JOptionPane.showMessageDialog(null, "No action selected.");
                break;
        }
    }

    private boolean checkRecipient(String recipient) {
        return recipient != null && recipient.length() <= 15 && recipient.startsWith("+"); // Allowing slightly longer for full international code
    }

    private boolean checkMessageLength(String message) {
        return message != null && message.length() <= 50;
    }

    String generateMessageID() {
        Random random = new Random();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }

    String generateMessageHash(String messageID, int messageNumber, String messageContent) {
        String firstTwoID = messageID.substring(0, Math.min(2, messageID.length()));
        String[] words = messageContent.split("\\s+");
        String firstWord = words.length > 0 ? words[0].toUpperCase() : "";
        String lastWord = words.length > 0 ? words[words.length - 1].toUpperCase() : "";
        return String.format("%s:%d:%s%s", firstTwoID, messageNumber, firstWord, lastWord);
    }

    private void storeMessageInJSON(JSONObject message) {
        try (FileWriter file = new FileWriter("stored_messages.json", true)) {
            if (new java.io.File("stored_messages.json").length() > 0) {
                file.write("," + message.toString(4));
            } else {
                file.write("[" + message.toString(4));
            }
            JOptionPane.showMessageDialog(null, "Message stored in stored_messages.json");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error storing message in JSON file.");
            e.printStackTrace();
        }
    }

    public int getTotalMessagesSent() {
        return numMessagesSent;
    }
}
