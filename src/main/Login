import javax.swing.JOptionPane;

public class Login {

    private static String registeredUsername;
    private static String registeredPassword;
    private static boolean isLoggedIn = false;

    public static void main(String[] args) {
        // This will be the Registration process.
        String firstName;
        String lastName;
        String username;
        String password;
        String cellNumber;

        // This method will allow a user to Register with their name and surname.
        firstName = JOptionPane.showInputDialog("Enter your First name:");
        lastName = JOptionPane.showInputDialog("Enter your Last name:");

        boolean isValidUserName;
        do {
            username = JOptionPane.showInputDialog("Enter your Username ( It must contain an underscore and contain 5 characters):");
            isValidUserName = AccountCreation.checkUsername(username);
        } while (!isValidUserName);
        JOptionPane.showMessageDialog(null, "Username successfully captured.");
        registeredUsername = username;

        boolean isPasswordValid;
        do {
            password = JOptionPane.showInputDialog("Enter your Password (It must contain 8 characters, a uppercase, a number and a special character):");
            isPasswordValid = AccountCreation.checkPasswordComplexity(password);
        } while (!isPasswordValid);
        JOptionPane.showMessageDialog(null, "Password successfully captured.");
        registeredPassword = password;

        boolean isCellValid;
        do {
            cellNumber = JOptionPane.showInputDialog("Enter your South African cell number ( It must start with +27 and 9 digits):");
            isCellValid = AccountCreation.checkCellPhoneNumber(cellNumber);
        } while (!isCellValid);
        JOptionPane.showMessageDialog(null, "Cellphone number successfully captured.");

        JOptionPane.showMessageDialog(null, "Registration successful! Welcome, " + firstName + " " +lastName + "!");

        // Now attempt login
        String loginUsername = JOptionPane.showInputDialog("Enter your username:");
        String loginPassword = JOptionPane.showInputDialog("Enter your password:");

        if (login(loginUsername, loginPassword)) {
            JOptionPane.showMessageDialog(null, "Login successful.");
            isLoggedIn = true;
            showMenu(); // Launch the menu
        } else {
            JOptionPane.showMessageDialog(null, "Login failed. Please try again.");
        }
    }

    public static boolean login(String username, String password) {
        return username.equals(registeredUsername) && password.equals(registeredPassword);
    }

    public static void showMenu() {
        if (!isLoggedIn) {
            JOptionPane.showMessageDialog(null, "You must log in to use the features.");
            return;
        }

        JOptionPane.showMessageDialog(null, "Welcome to QuickChat.");

        int numMessagesToSend = -1;
        while (numMessagesToSend <= 0) {
            String input = JOptionPane.showInputDialog("How many messages would you like to enter?");
            if (input == null) { // User cancelled
                JOptionPane.showMessageDialog(null, "Exiting QuickChat.");
                return;
            }
            try {
                numMessagesToSend = Integer.parseInt(input);
                if (numMessagesToSend <= 0) {
                    JOptionPane.showMessageDialog(null, "Please enter a positive number of messages.");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter a number.");
            }
        }

        Message messenger = new Message();
        for (int i = 0; i < numMessagesToSend; i++) {
            messenger.sendMessageFlow(i + 1); // Pass the message number
        }

        JOptionPane.showMessageDialog(null, "Total number of messages processed: " + messenger.getTotalMessagesSent());

        int choice = -1;

        while (choice != 2) { // 2 is the index for "Quit"
            String input = JOptionPane.showInputDialog(null, "Choose an option: " +
                            "1) Send Messages " +
                            "2) Show recently sent messages " +
                            "3) Quit", "QuickChat Menu",
                    JOptionPane.PLAIN_MESSAGE, null, null, null).toString();

            if (input == null) {
                choice = 2; // Treat cancel as quit
            } else {
                try {
                    choice = Integer.parseInt(input) - 1; // Adjust for 0-based index
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Invalid input. Please enter a number between 1 and 3.");
                    continue;
                }
            }

            switch (choice) {
                case 1: // Send Messages
                    messenger.sendMessageFlow(messenger.getTotalMessagesSent() + 1); // Continue sending
                    break;
                case 2: // Show recently sent messages
                    JOptionPane.showMessageDialog(null, "Coming Soon.");
                    break;
                case 3: // Quit
                    JOptionPane.showMessageDialog(null, "Exiting QuickChat.");
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Invalid option. Please enter a number between 1 and 3.");
            }
        }
    }

    public static class AccountCreation {
        public static boolean checkUsername(String username) {
            if (username != null && username.contains("_") && username.length() == 5) {
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid username. Please ensure that your Username contains an underscore and contains 5 characters.");
                return false;
            }
        }

        public static boolean checkPasswordComplexity(String password) {
            if (password != null && password.matches("^(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d\\s:]).{8,}$")) {
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid password. Please ensure that your Password contains at least 8 characters, a capital letter, a number, and a special character (excluding colon).");
                return false;
            }
        }

        public static boolean checkCellPhoneNumber(String cellNumber) {
            if (cellNumber != null && cellNumber.matches("^\\+27\\d{9}$")) {
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid number. Please ensure that your number starts with +27 and is followed by 9 digits.");
                return false;
            }
        }
    }
